//################################################################################
//###############              ../src/proto_tools.cc               ###############
//###############                                                  ###############
//###############     !!! autogenerated file, don't modify !!!     ###############
//################################################################################

#include "proto.h"
#include "proto.pb.h"
#include "proto_tools.h"

namespace proto
{
//--------------------------------------------------- ancestor and descendant maps 
 

typedef std::map< int, std::set<int> > TypeMap;
TypeMap ancestorMap;
TypeMap descendantMap;

static void makeAncestorDescendant(int ancestor, int descendant)
{
    ancestorMap[ancestor].insert(descendant);
    
    if (ancestorMap.find(descendant) != ancestorMap.end())
    {
        std::set<int> grandchilds = ancestorMap[descendant];
        std::set<int>::const_iterator it = grandchilds.begin();
        while (it != grandchilds.end())
        {
            makeAncestorDescendant(ancestor, *it);
            it++;
        }
    }
    
    descendantMap[descendant].insert(ancestor);
}

static int initInheritanceMaps()
{ 
    makeAncestorDescendant(ObjectTask,ObjectReachTask);
    makeAncestorDescendant(ObjectTask,ObjectCompleteTask); 
    makeAncestorDescendant(ObjectComponent,ObjectShape);
    makeAncestorDescendant(ObjectComponent,ObjectTransform);
    makeAncestorDescendant(ObjectComponent,ObjectMovement);
    makeAncestorDescendant(ObjectComponent,ObjectSteering);
    makeAncestorDescendant(ObjectComponent,ObjectWeapon);
    makeAncestorDescendant(ObjectComponent,ObjectShooting);
    makeAncestorDescendant(ObjectComponent,ObjectArming);
    makeAncestorDescendant(ObjectComponent,ObjectBanking);
    makeAncestorDescendant(ObjectComponent,ObjectEnergy);
    makeAncestorDescendant(ObjectComponent,ObjectHull);
    makeAncestorDescendant(ObjectComponent,ObjectShield);
    makeAncestorDescendant(ObjectComponent,ObjectCollision);
    makeAncestorDescendant(ObjectComponent,ObjectLifetime);
    makeAncestorDescendant(ObjectComponent,ObjectDamageOnCollision);
    makeAncestorDescendant(ObjectComponent,ObjectDamage);
    makeAncestorDescendant(ObjectComponent,ObjectDieOnCollision);
    makeAncestorDescendant(ObjectComponent,ObjectMoveOnCollision);
    makeAncestorDescendant(ObjectComponent,ObjectDamageReceiver);
    makeAncestorDescendant(ObjectComponent,ObjectArmingAgent);
    makeAncestorDescendant(ObjectComponent,ObjectSteeringAgent);
    makeAncestorDescendant(ObjectComponent,ObjectAiAgent);
    makeAncestorDescendant(ObjectComponent,ObjectAiBrain);
    makeAncestorDescendant(ObjectComponent,ObjectAiGroup);
    makeAncestorDescendant(ObjectComponent,ObjectAiGroupMember);
    makeAncestorDescendant(ObjectComponent,ObjectDestructable);
    makeAncestorDescendant(ObjectComponent,ObjectDestroyable);
    makeAncestorDescendant(ObjectComponent,ObjectSpawnPoint);
    makeAncestorDescendant(ObjectComponent,ObjectCameraSettings);
    makeAncestorDescendant(ObjectComponent,ObjectCameraTransform);
    makeAncestorDescendant(ObjectComponent,ObjectCameraThirdPerson);
    makeAncestorDescendant(ObjectComponent,ObjectLight);
    makeAncestorDescendant(ObjectComponent,ObjectTest); 
    makeAncestorDescendant(ObjectDebugSection,ObjectDebugCollision);
    makeAncestorDescendant(ObjectDebugSection,ObjectDebugHUD); 
    makeAncestorDescendant(ObjectScriptItem,ObjectTask);
    makeAncestorDescendant(ObjectScriptItem,ObjectAction);
    makeAncestorDescendant(ObjectScriptItem,ObjectCondition);
    makeAncestorDescendant(ObjectScriptItem,ObjectCommand);
    makeAncestorDescendant(ObjectScriptItem,ObjectSet); 
    return 1;
}
        
static int mapInit = initInheritanceMaps();

bool objectTypeHasAncestorType(int descendant, int ancestor)
{
    if (descendant == ancestor) return true;
    if (ancestorMap[ancestor].count(descendant) > 0) return true;
    return false;
}

bool messageHasAncestorType(protoMessage msg, int ancestor)
{
    return objectTypeHasAncestorType(objectTypeForMessage(msg), ancestor);
}

 

//-------------------------------------------------------------- entity type names 
 
std::string nameForEntityType(int entityType)
{
    switch (entityType)
    { 
        case Entity_Type_Asteroid: return "Asteroid"; 
        case Entity_Type_AsteroidField: return "AsteroidField"; 
        case Entity_Type_Camera: return "Camera"; 
        case Entity_Type_Moon: return "Moon"; 
        case Entity_Type_Planet: return "Planet"; 
        case Entity_Type_Projectile: return "Projectile"; 
        case Entity_Type_Ship: return "Ship"; 
        case Entity_Type_Station: return "Station"; 
        case Entity_Type_Sun: return "Sun"; 
        case Entity_Type_Weapon: return "Weapon"; 
        case Entity_Type_Zone: return "Zone"; 
    default: return "";
        }
} 

//------------------------------------------------------------- entity field types 
 
std::vector<int> validEntityFieldTypes(protoMessage msg, protoField field)
{
assert(!isMessageRef(msg));
std::vector<int> types;
 
    switch(field->number()) 
    { 
    case 8694459: // weapon 
        if (messageHasAncestorType(msg, ObjectWorld))
        {
            types.push_back(Entity_Type_Weapon);
        } 
        break; 
    case 6951304: // entity 
        if (messageHasAncestorType(msg, ObjectObjectList))
        {
            types = allEntityTypes();
        } 
        break; 
    case 5231566: // object 
        if (messageHasAncestorType(msg, ObjectLocation))
        {
            types = allEntityTypes();
        } 
        break; 
    case 9719173: // weaponTemplates 
        if (messageHasAncestorType(msg, ObjectArming))
        {
            types = allEntityTypes();
        } 
        break; 
    case 6426843: // playerShip 
        if (messageHasAncestorType(msg, ObjectConfigGame))
        {
            types = allEntityTypes();
        } 
        break; 
    case 8922695: // projectile 
        if (messageHasAncestorType(msg, ObjectWorld))
        {
            types.push_back(Entity_Type_Projectile);
        } 
        if (messageHasAncestorType(msg, ObjectWeapon))
        {
            types = allEntityTypes();
        } 
        if (messageHasAncestorType(msg, ObjectShooting))
        {
            types = allEntityTypes();
        } 
        break; 
    case 3790963: // camera 
        if (messageHasAncestorType(msg, ObjectWorld))
        {
            types.push_back(Entity_Type_Camera);
        } 
        if (messageHasAncestorType(msg, ObjectConfigGame))
        {
            types = allEntityTypes();
        } 
        break; 
    case 3681616: // ship 
        if (messageHasAncestorType(msg, ObjectWorld))
        {
            types.push_back(Entity_Type_Ship);
        } 
        break; 
    default: break; 
    } 
    // exclude entity types 
 
    std::set<int> typeset(types.begin(), types.end()); 
    switch(field->number()) 
    { 
    case 5231566: // object 
        if (messageHasAncestorType(msg, ObjectLocation))
        {
            typeset.erase(Entity_Type_Projectile);
            typeset.erase(Entity_Type_Weapon);
        } 
        break; 
    default: break; 
    } 
    return std::vector<int>(typeset.begin(), typeset.end());
} 

//------------------------------------------------------------ message field types 
 
std::vector<int> validMessageFieldTypes(protoMessage msg, protoField field)
{
    assert(!isMessageRef(msg));
    std::vector<int> types;
 
    switch(field->number()) 
    { 
    case 1469832: // component 
        if (messageHasAncestorType(msg, ObjectEntity))
        {
            types = descendantsOfObjectType(ObjectComponent);
        } 
        break; 
    case 8694459: // weapon 
        if (messageHasAncestorType(msg, ObjectWorld))
        {
            types.push_back(ObjectEntity);
        } 
        break; 
    case 6951304: // entity 
        if (messageHasAncestorType(msg, ObjectObjectList))
        {
            types.push_back(ObjectEntity);
        } 
        break; 
    case 5231566: // object 
        if (messageHasAncestorType(msg, ObjectSet))
        {
            types = allObjectTypes();
        } 
        if (messageHasAncestorType(msg, ObjectCommand))
        {
            types = allObjectTypes();
        } 
        if (messageHasAncestorType(msg, ObjectMission))
        {
            types = allObjectTypes();
        } 
        if (messageHasAncestorType(msg, ObjectLocation))
        {
            types.push_back(ObjectEntity);
        } 
        break; 
    case 9719173: // weaponTemplates 
        if (messageHasAncestorType(msg, ObjectArming))
        {
            types.push_back(ObjectEntity);
        } 
        break; 
    case 6426843: // playerShip 
        if (messageHasAncestorType(msg, ObjectConfigGame))
        {
            types.push_back(ObjectEntity);
        } 
        break; 
    case 8922695: // projectile 
        if (messageHasAncestorType(msg, ObjectWorld))
        {
            types.push_back(ObjectEntity);
        } 
        if (messageHasAncestorType(msg, ObjectWeapon))
        {
            types.push_back(ObjectEntity);
        } 
        if (messageHasAncestorType(msg, ObjectShooting))
        {
            types.push_back(ObjectEntity);
        } 
        break; 
    case 1283600: // section 
        if (messageHasAncestorType(msg, ObjectDebug))
        {
            types = descendantsOfObjectType(ObjectDebugSection);
        } 
        break; 
    case 5390936: // scriptItem 
        if (messageHasAncestorType(msg, ObjectMission))
        {
            types = descendantsOfObjectType(ObjectScriptItem);
        } 
        break; 
    case 8740323: // subject 
        if (messageHasAncestorType(msg, ObjectCommand))
        {
            types = allObjectTypes();
        } 
        break; 
    case 3790963: // camera 
        if (messageHasAncestorType(msg, ObjectWorld))
        {
            types.push_back(ObjectEntity);
        } 
        if (messageHasAncestorType(msg, ObjectConfigGame))
        {
            types.push_back(ObjectEntity);
        } 
        break; 
    case 3681616: // ship 
        if (messageHasAncestorType(msg, ObjectWorld))
        {
            types.push_back(ObjectEntity);
        } 
        break; 
    default: break; 
    } 
    // exclude object types 
 
    std::set<int> typeset(types.begin(), types.end()); 
    switch(field->number()) 
    { 
    case 5231566: // object 
        if (messageHasAncestorType(msg, ObjectMission))
        {
            typeset.erase(ObjectEntity);
        } 
        break; 
    case 1283600: // section 
        if (messageHasAncestorType(msg, ObjectDebug))
        {
            typeset.erase(ObjectDebugSection);
        } 
        break; 
    case 5390936: // scriptItem 
        if (messageHasAncestorType(msg, ObjectMission))
        {
            typeset.erase(ObjectTask);
            typeset.erase(ObjectAction);
        } 
        break; 
    default: break; 
    } 
    return std::vector<int>(typeset.begin(), typeset.end());
} 

//------------------------------------------------------------ message field flags 
 
int messageFieldFlags(protoMessage msg, protoField field)
{
    assert(!isMessageRef(msg));    
 
    switch(field->number()) 
    { 
    case 1283600: // section 
        if (messageHasAncestorType(msg, ObjectDebug)) { return FIELD_FLAG_ONETYPE; } 
        break; 
    case 1469832: // component 
        if (messageHasAncestorType(msg, ObjectEntity)) { return FIELD_FLAG_ONETYPE|FIELD_FLAG_NOREF; } 
        break; 
    case 8922695: // projectile 
        if (messageHasAncestorType(msg, ObjectShooting)) { return FIELD_FLAG_REF; } 
        break; 
    default: break; 
    } 
    return FIELD_FLAG_NONE;
} 

//-------------------------------------------------------- object type for message 
 
static std::map<std::string, int> initObjectNameToTypeMap() 
{ 
    std::map<std::string, int> m; 
    m["Component"         ] = ObjectComponent;          
    m["ComponentRef"      ] = ObjectComponentRef;       
    m["Shape"             ] = ObjectShape;              
    m["ShapeRef"          ] = ObjectShapeRef;           
    m["Transform"         ] = ObjectTransform;          
    m["TransformRef"      ] = ObjectTransformRef;       
    m["Movement"          ] = ObjectMovement;           
    m["MovementRef"       ] = ObjectMovementRef;        
    m["Steering"          ] = ObjectSteering;           
    m["SteeringRef"       ] = ObjectSteeringRef;        
    m["Weapon"            ] = ObjectWeapon;             
    m["WeaponRef"         ] = ObjectWeaponRef;          
    m["Shooting"          ] = ObjectShooting;           
    m["ShootingRef"       ] = ObjectShootingRef;        
    m["Arming"            ] = ObjectArming;             
    m["ArmingRef"         ] = ObjectArmingRef;          
    m["Banking"           ] = ObjectBanking;            
    m["BankingRef"        ] = ObjectBankingRef;         
    m["Energy"            ] = ObjectEnergy;             
    m["EnergyRef"         ] = ObjectEnergyRef;          
    m["Hull"              ] = ObjectHull;               
    m["HullRef"           ] = ObjectHullRef;            
    m["Shield"            ] = ObjectShield;             
    m["ShieldRef"         ] = ObjectShieldRef;          
    m["Collision"         ] = ObjectCollision;          
    m["CollisionRef"      ] = ObjectCollisionRef;       
    m["Lifetime"          ] = ObjectLifetime;           
    m["LifetimeRef"       ] = ObjectLifetimeRef;        
    m["DamageOnCollision" ] = ObjectDamageOnCollision;  
    m["DamageOnCollisionRef"] = ObjectDamageOnCollisionRef;
    m["Damage"            ] = ObjectDamage;             
    m["DamageRef"         ] = ObjectDamageRef;          
    m["DieOnCollision"    ] = ObjectDieOnCollision;     
    m["DieOnCollisionRef" ] = ObjectDieOnCollisionRef;  
    m["MoveOnCollision"   ] = ObjectMoveOnCollision;    
    m["MoveOnCollisionRef"] = ObjectMoveOnCollisionRef; 
    m["DamageReceiver"    ] = ObjectDamageReceiver;     
    m["DamageReceiverRef" ] = ObjectDamageReceiverRef;  
    m["ArmingAgent"       ] = ObjectArmingAgent;        
    m["ArmingAgentRef"    ] = ObjectArmingAgentRef;     
    m["SteeringAgent"     ] = ObjectSteeringAgent;      
    m["SteeringAgentRef"  ] = ObjectSteeringAgentRef;   
    m["AiAgent"           ] = ObjectAiAgent;            
    m["AiAgentRef"        ] = ObjectAiAgentRef;         
    m["AiBrain"           ] = ObjectAiBrain;            
    m["AiBrainRef"        ] = ObjectAiBrainRef;         
    m["AiGroup"           ] = ObjectAiGroup;            
    m["AiGroupRef"        ] = ObjectAiGroupRef;         
    m["AiGroupMember"     ] = ObjectAiGroupMember;      
    m["AiGroupMemberRef"  ] = ObjectAiGroupMemberRef;   
    m["Destructable"      ] = ObjectDestructable;       
    m["DestructableRef"   ] = ObjectDestructableRef;    
    m["Destroyable"       ] = ObjectDestroyable;        
    m["DestroyableRef"    ] = ObjectDestroyableRef;     
    m["SpawnPoint"        ] = ObjectSpawnPoint;         
    m["SpawnPointRef"     ] = ObjectSpawnPointRef;      
    m["CameraSettings"    ] = ObjectCameraSettings;     
    m["CameraSettingsRef" ] = ObjectCameraSettingsRef;  
    m["CameraTransform"   ] = ObjectCameraTransform;    
    m["CameraTransformRef"] = ObjectCameraTransformRef; 
    m["CameraThirdPerson" ] = ObjectCameraThirdPerson;  
    m["CameraThirdPersonRef"] = ObjectCameraThirdPersonRef;
    m["Light"             ] = ObjectLight;              
    m["LightRef"          ] = ObjectLightRef;           
    m["Test"              ] = ObjectTest;               
    m["TestRef"           ] = ObjectTestRef;            
    m["Entity"            ] = ObjectEntity;             
    m["EntityRef"         ] = ObjectEntityRef;          
    m["ObjectList"        ] = ObjectObjectList;         
    m["ObjectListRef"     ] = ObjectObjectListRef;      
    m["MyTimer"           ] = ObjectMyTimer;            
    m["MyTimerRef"        ] = ObjectMyTimerRef;         
    m["MyCounter"         ] = ObjectMyCounter;          
    m["MyCounterRef"      ] = ObjectMyCounterRef;       
    m["ScriptItem"        ] = ObjectScriptItem;         
    m["ScriptItemRef"     ] = ObjectScriptItemRef;      
    m["Timer"             ] = ObjectTimer;              
    m["TimerRef"          ] = ObjectTimerRef;           
    m["Counter"           ] = ObjectCounter;            
    m["CounterRef"        ] = ObjectCounterRef;         
    m["Jumpgate"          ] = ObjectJumpgate;           
    m["JumpgateRef"       ] = ObjectJumpgateRef;        
    m["Task"              ] = ObjectTask;               
    m["TaskRef"           ] = ObjectTaskRef;            
    m["Action"            ] = ObjectAction;             
    m["ActionRef"         ] = ObjectActionRef;          
    m["Condition"         ] = ObjectCondition;          
    m["ConditionRef"      ] = ObjectConditionRef;       
    m["Command"           ] = ObjectCommand;            
    m["CommandRef"        ] = ObjectCommandRef;         
    m["Set"               ] = ObjectSet;                
    m["SetRef"            ] = ObjectSetRef;             
    m["ReachTask"         ] = ObjectReachTask;          
    m["ReachTaskRef"      ] = ObjectReachTaskRef;       
    m["CompleteTask"      ] = ObjectCompleteTask;       
    m["CompleteTaskRef"   ] = ObjectCompleteTaskRef;    
    m["Mission"           ] = ObjectMission;            
    m["MissionRef"        ] = ObjectMissionRef;         
    m["Location"          ] = ObjectLocation;           
    m["LocationRef"       ] = ObjectLocationRef;        
    m["Region"            ] = ObjectRegion;             
    m["RegionRef"         ] = ObjectRegionRef;          
    m["Sector"            ] = ObjectSector;             
    m["SectorRef"         ] = ObjectSectorRef;          
    m["DebugSection"      ] = ObjectDebugSection;       
    m["DebugSectionRef"   ] = ObjectDebugSectionRef;    
    m["DebugCollision"    ] = ObjectDebugCollision;     
    m["DebugCollisionRef" ] = ObjectDebugCollisionRef;  
    m["DebugHUD"          ] = ObjectDebugHUD;           
    m["DebugHUDRef"       ] = ObjectDebugHUDRef;        
    m["Debug"             ] = ObjectDebug;              
    m["DebugRef"          ] = ObjectDebugRef;           
    m["ConfigHUD"         ] = ObjectConfigHUD;          
    m["ConfigHUDRef"      ] = ObjectConfigHUDRef;       
    m["ConfigGame"        ] = ObjectConfigGame;         
    m["ConfigGameRef"     ] = ObjectConfigGameRef;      
    m["ConfigInput"       ] = ObjectConfigInput;        
    m["ConfigInputRef"    ] = ObjectConfigInputRef;     
    m["ConfigVideo"       ] = ObjectConfigVideo;        
    m["ConfigVideoRef"    ] = ObjectConfigVideoRef;     
    m["ConfigSound"       ] = ObjectConfigSound;        
    m["ConfigSoundRef"    ] = ObjectConfigSoundRef;     
    m["Config"            ] = ObjectConfig;             
    m["ConfigRef"         ] = ObjectConfigRef;          
    m["World"             ] = ObjectWorld;              
    m["WorldRef"          ] = ObjectWorldRef;            
    return m; 
} 

std::map<std::string, int> objectNameToTypeMap = initObjectNameToTypeMap();
    
int objectTypeForMessage(protoMessage message)
{
    if (!message) return ObjectNone;
    if (isMessageRef(message))
    {
        return ((protoRef)message)->objecttype();
    }
    return objectTypeForMessageName(message->GetDescriptor()->name());
}
        
int objectTypeForMessageName(const std::string & name)
{
    std::map<std::string, int>::iterator it=objectNameToTypeMap.find(name);
    if (it!=objectNameToTypeMap.end())
        return it->second;
    return ObjectNone;
} 

//----------------------------------------------------------- objects of base type 
 
std::vector<int> objectTypesWithAncestorTypeName(const std::string & ancestorTypeName) 
{ 
    int ancestorType = objectTypeForMessageName(ancestorTypeName); 
    return objectTypesWithAncestorType(ancestorType); 
} 
std::vector<int> objectTypesWithAncestorType(int ancestorType) 
{ 
    std::vector<int> types; 
    switch(ancestorType) { 
    case ObjectTask: { 
        types.push_back(ObjectReachTask);
        types.push_back(ObjectCompleteTask); 
    break; } 
    case ObjectComponent: { 
        types.push_back(ObjectShape);
        types.push_back(ObjectTransform);
        types.push_back(ObjectMovement);
        types.push_back(ObjectSteering);
        types.push_back(ObjectWeapon);
        types.push_back(ObjectShooting);
        types.push_back(ObjectArming);
        types.push_back(ObjectBanking);
        types.push_back(ObjectEnergy);
        types.push_back(ObjectHull);
        types.push_back(ObjectShield);
        types.push_back(ObjectCollision);
        types.push_back(ObjectLifetime);
        types.push_back(ObjectDamageOnCollision);
        types.push_back(ObjectDamage);
        types.push_back(ObjectDieOnCollision);
        types.push_back(ObjectMoveOnCollision);
        types.push_back(ObjectDamageReceiver);
        types.push_back(ObjectArmingAgent);
        types.push_back(ObjectSteeringAgent);
        types.push_back(ObjectAiAgent);
        types.push_back(ObjectAiBrain);
        types.push_back(ObjectAiGroup);
        types.push_back(ObjectAiGroupMember);
        types.push_back(ObjectDestructable);
        types.push_back(ObjectDestroyable);
        types.push_back(ObjectSpawnPoint);
        types.push_back(ObjectCameraSettings);
        types.push_back(ObjectCameraTransform);
        types.push_back(ObjectCameraThirdPerson);
        types.push_back(ObjectLight);
        types.push_back(ObjectTest); 
    break; } 
    case ObjectDebugSection: { 
        types.push_back(ObjectDebugCollision);
        types.push_back(ObjectDebugHUD); 
    break; } 
    case ObjectScriptItem: { 
        types.push_back(ObjectTask);
        types.push_back(ObjectAction);
        types.push_back(ObjectCondition);
        types.push_back(ObjectCommand);
        types.push_back(ObjectSet); 
    break; } 
    default: break; 
    } 
    return types; 
} 

//--------------------------------------------------------------- all entity types 
 
std::vector<int> allEntityTypes() 
{ 
    std::vector<int> types; 
    types.push_back(Entity_Type_Asteroid);
    types.push_back(Entity_Type_AsteroidField);
    types.push_back(Entity_Type_Camera);
    types.push_back(Entity_Type_Moon);
    types.push_back(Entity_Type_Planet);
    types.push_back(Entity_Type_Projectile);
    types.push_back(Entity_Type_Ship);
    types.push_back(Entity_Type_Station);
    types.push_back(Entity_Type_Sun);
    types.push_back(Entity_Type_Weapon);
    types.push_back(Entity_Type_Zone); 
    return types; 
} 

//--------------------------------------------- default components for entity type 
 
std::vector<int> defaultComponentsForEntityType(int entityType) 
{ 
    std::vector<int> types; 
    switch(entityType) 
    { 
    case Entity_Type_Asteroid:
         types.push_back(ObjectTransform);
         types.push_back(ObjectCollision);
         types.push_back(ObjectMovement);
         types.push_back(ObjectShape);
         types.push_back(ObjectDamageReceiver);
    break;
    case Entity_Type_AsteroidField:
         types.push_back(ObjectTransform);
    break;
    case Entity_Type_Camera:
         types.push_back(ObjectCameraThirdPerson);
    break;
    case Entity_Type_Moon:
         types.push_back(ObjectTransform);
         types.push_back(ObjectShape);
    break;
    case Entity_Type_Planet:
         types.push_back(ObjectTransform);
         types.push_back(ObjectShape);
    break;
    case Entity_Type_Projectile:

    break;
    case Entity_Type_Ship:
         types.push_back(ObjectTransform);
         types.push_back(ObjectShape);
    break;
    case Entity_Type_Station:
         types.push_back(ObjectTransform);
         types.push_back(ObjectShape);
    break;
    case Entity_Type_Sun:
         types.push_back(ObjectTransform);
         types.push_back(ObjectShape);
    break;
    case Entity_Type_Weapon:
         types.push_back(ObjectTransform);
    break;
    case Entity_Type_Zone:
         types.push_back(ObjectTransform);
    break; 
    } 
    return types; 
} 

//--------------------------------------------------------------- all object types 
 
std::vector<int> allObjectTypes() 
{ 
    std::vector<int> types; 
    types.push_back(ObjectComponent);
    types.push_back(ObjectShape);
    types.push_back(ObjectTransform);
    types.push_back(ObjectMovement);
    types.push_back(ObjectSteering);
    types.push_back(ObjectWeapon);
    types.push_back(ObjectShooting);
    types.push_back(ObjectArming);
    types.push_back(ObjectBanking);
    types.push_back(ObjectEnergy);
    types.push_back(ObjectHull);
    types.push_back(ObjectShield);
    types.push_back(ObjectCollision);
    types.push_back(ObjectLifetime);
    types.push_back(ObjectDamageOnCollision);
    types.push_back(ObjectDamage);
    types.push_back(ObjectDieOnCollision);
    types.push_back(ObjectMoveOnCollision);
    types.push_back(ObjectDamageReceiver);
    types.push_back(ObjectArmingAgent);
    types.push_back(ObjectSteeringAgent);
    types.push_back(ObjectAiAgent);
    types.push_back(ObjectAiBrain);
    types.push_back(ObjectAiGroup);
    types.push_back(ObjectAiGroupMember);
    types.push_back(ObjectDestructable);
    types.push_back(ObjectDestroyable);
    types.push_back(ObjectSpawnPoint);
    types.push_back(ObjectCameraSettings);
    types.push_back(ObjectCameraTransform);
    types.push_back(ObjectCameraThirdPerson);
    types.push_back(ObjectLight);
    types.push_back(ObjectTest);
    types.push_back(ObjectEntity);
    types.push_back(ObjectObjectList);
    types.push_back(ObjectMyTimer);
    types.push_back(ObjectMyCounter);
    types.push_back(ObjectScriptItem);
    types.push_back(ObjectTimer);
    types.push_back(ObjectCounter);
    types.push_back(ObjectJumpgate);
    types.push_back(ObjectTask);
    types.push_back(ObjectAction);
    types.push_back(ObjectCondition);
    types.push_back(ObjectCommand);
    types.push_back(ObjectSet);
    types.push_back(ObjectReachTask);
    types.push_back(ObjectCompleteTask);
    types.push_back(ObjectMission);
    types.push_back(ObjectLocation);
    types.push_back(ObjectRegion);
    types.push_back(ObjectSector);
    types.push_back(ObjectDebugSection);
    types.push_back(ObjectDebugCollision);
    types.push_back(ObjectDebugHUD);
    types.push_back(ObjectDebug);
    types.push_back(ObjectConfigHUD);
    types.push_back(ObjectConfigGame);
    types.push_back(ObjectConfigInput);
    types.push_back(ObjectConfigVideo);
    types.push_back(ObjectConfigSound);
    types.push_back(ObjectConfig);
    types.push_back(ObjectWorld); 
    return types; 
} 

//----------------------------------------------------------- all object ref types 
 
std::vector<int> allObjectRefTypes() 
{ 
    std::vector<int> types; 
    types.push_back(ObjectComponentRef);
    types.push_back(ObjectShapeRef);
    types.push_back(ObjectTransformRef);
    types.push_back(ObjectMovementRef);
    types.push_back(ObjectSteeringRef);
    types.push_back(ObjectWeaponRef);
    types.push_back(ObjectShootingRef);
    types.push_back(ObjectArmingRef);
    types.push_back(ObjectBankingRef);
    types.push_back(ObjectEnergyRef);
    types.push_back(ObjectHullRef);
    types.push_back(ObjectShieldRef);
    types.push_back(ObjectCollisionRef);
    types.push_back(ObjectLifetimeRef);
    types.push_back(ObjectDamageOnCollisionRef);
    types.push_back(ObjectDamageRef);
    types.push_back(ObjectDieOnCollisionRef);
    types.push_back(ObjectMoveOnCollisionRef);
    types.push_back(ObjectDamageReceiverRef);
    types.push_back(ObjectArmingAgentRef);
    types.push_back(ObjectSteeringAgentRef);
    types.push_back(ObjectAiAgentRef);
    types.push_back(ObjectAiBrainRef);
    types.push_back(ObjectAiGroupRef);
    types.push_back(ObjectAiGroupMemberRef);
    types.push_back(ObjectDestructableRef);
    types.push_back(ObjectDestroyableRef);
    types.push_back(ObjectSpawnPointRef);
    types.push_back(ObjectCameraSettingsRef);
    types.push_back(ObjectCameraTransformRef);
    types.push_back(ObjectCameraThirdPersonRef);
    types.push_back(ObjectLightRef);
    types.push_back(ObjectTestRef);
    types.push_back(ObjectEntityRef);
    types.push_back(ObjectObjectListRef);
    types.push_back(ObjectMyTimerRef);
    types.push_back(ObjectMyCounterRef);
    types.push_back(ObjectScriptItemRef);
    types.push_back(ObjectTimerRef);
    types.push_back(ObjectCounterRef);
    types.push_back(ObjectJumpgateRef);
    types.push_back(ObjectTaskRef);
    types.push_back(ObjectActionRef);
    types.push_back(ObjectConditionRef);
    types.push_back(ObjectCommandRef);
    types.push_back(ObjectSetRef);
    types.push_back(ObjectReachTaskRef);
    types.push_back(ObjectCompleteTaskRef);
    types.push_back(ObjectMissionRef);
    types.push_back(ObjectLocationRef);
    types.push_back(ObjectRegionRef);
    types.push_back(ObjectSectorRef);
    types.push_back(ObjectDebugSectionRef);
    types.push_back(ObjectDebugCollisionRef);
    types.push_back(ObjectDebugHUDRef);
    types.push_back(ObjectDebugRef);
    types.push_back(ObjectConfigHUDRef);
    types.push_back(ObjectConfigGameRef);
    types.push_back(ObjectConfigInputRef);
    types.push_back(ObjectConfigVideoRef);
    types.push_back(ObjectConfigSoundRef);
    types.push_back(ObjectConfigRef);
    types.push_back(ObjectWorldRef); 
    return types; 
} 

//------------------------------------------------------------- new object of type 
 
protoMessage newObjectOfType(int objectType) 
{ 
    protoMessage newMessage = NULL; 
    switch (objectType) 
    { 
      case ObjectComponent       : newMessage = new proto::Component;       break;
      case ObjectShape           : newMessage = new proto::Shape;           break;
      case ObjectTransform       : newMessage = new proto::Transform;       break;
      case ObjectMovement        : newMessage = new proto::Movement;        break;
      case ObjectSteering        : newMessage = new proto::Steering;        break;
      case ObjectWeapon          : newMessage = new proto::Weapon;          break;
      case ObjectShooting        : newMessage = new proto::Shooting;        break;
      case ObjectArming          : newMessage = new proto::Arming;          break;
      case ObjectBanking         : newMessage = new proto::Banking;         break;
      case ObjectEnergy          : newMessage = new proto::Energy;          break;
      case ObjectHull            : newMessage = new proto::Hull;            break;
      case ObjectShield          : newMessage = new proto::Shield;          break;
      case ObjectCollision       : newMessage = new proto::Collision;       break;
      case ObjectLifetime        : newMessage = new proto::Lifetime;        break;
      case ObjectDamageOnCollision: newMessage = new proto::DamageOnCollision; break;
      case ObjectDamage          : newMessage = new proto::Damage;          break;
      case ObjectDieOnCollision  : newMessage = new proto::DieOnCollision;  break;
      case ObjectMoveOnCollision : newMessage = new proto::MoveOnCollision; break;
      case ObjectDamageReceiver  : newMessage = new proto::DamageReceiver;  break;
      case ObjectArmingAgent     : newMessage = new proto::ArmingAgent;     break;
      case ObjectSteeringAgent   : newMessage = new proto::SteeringAgent;   break;
      case ObjectAiAgent         : newMessage = new proto::AiAgent;         break;
      case ObjectAiBrain         : newMessage = new proto::AiBrain;         break;
      case ObjectAiGroup         : newMessage = new proto::AiGroup;         break;
      case ObjectAiGroupMember   : newMessage = new proto::AiGroupMember;   break;
      case ObjectDestructable    : newMessage = new proto::Destructable;    break;
      case ObjectDestroyable     : newMessage = new proto::Destroyable;     break;
      case ObjectSpawnPoint      : newMessage = new proto::SpawnPoint;      break;
      case ObjectCameraSettings  : newMessage = new proto::CameraSettings;  break;
      case ObjectCameraTransform : newMessage = new proto::CameraTransform; break;
      case ObjectCameraThirdPerson: newMessage = new proto::CameraThirdPerson; break;
      case ObjectLight           : newMessage = new proto::Light;           break;
      case ObjectTest            : newMessage = new proto::Test;            break;
      case ObjectEntity          : newMessage = new proto::Entity;          break;
      case ObjectObjectList      : newMessage = new proto::ObjectList;      break;
      case ObjectMyTimer         : newMessage = new proto::MyTimer;         break;
      case ObjectMyCounter       : newMessage = new proto::MyCounter;       break;
      case ObjectScriptItem      : newMessage = new proto::ScriptItem;      break;
      case ObjectTimer           : newMessage = new proto::Timer;           break;
      case ObjectCounter         : newMessage = new proto::Counter;         break;
      case ObjectJumpgate        : newMessage = new proto::Jumpgate;        break;
      case ObjectTask            : newMessage = new proto::Task;            break;
      case ObjectAction          : newMessage = new proto::Action;          break;
      case ObjectCondition       : newMessage = new proto::Condition;       break;
      case ObjectCommand         : newMessage = new proto::Command;         break;
      case ObjectSet             : newMessage = new proto::Set;             break;
      case ObjectReachTask       : newMessage = new proto::ReachTask;       break;
      case ObjectCompleteTask    : newMessage = new proto::CompleteTask;    break;
      case ObjectMission         : newMessage = new proto::Mission;         break;
      case ObjectLocation        : newMessage = new proto::Location;        break;
      case ObjectRegion          : newMessage = new proto::Region;          break;
      case ObjectSector          : newMessage = new proto::Sector;          break;
      case ObjectDebugSection    : newMessage = new proto::DebugSection;    break;
      case ObjectDebugCollision  : newMessage = new proto::DebugCollision;  break;
      case ObjectDebugHUD        : newMessage = new proto::DebugHUD;        break;
      case ObjectDebug           : newMessage = new proto::Debug;           break;
      case ObjectConfigHUD       : newMessage = new proto::ConfigHUD;       break;
      case ObjectConfigGame      : newMessage = new proto::ConfigGame;      break;
      case ObjectConfigInput     : newMessage = new proto::ConfigInput;     break;
      case ObjectConfigVideo     : newMessage = new proto::ConfigVideo;     break;
      case ObjectConfigSound     : newMessage = new proto::ConfigSound;     break;
      case ObjectConfig          : newMessage = new proto::Config;          break;
      case ObjectWorld           : newMessage = new proto::World;           break; 
      default:                   newMessage = new proto::ObjectRef; break; 
    } 
    return newMessage; 
} 

//-------------------------------------------------- new collection object of type 
 
protoMessage newCollectionObjectOfType(protoCollection collection, int objectType) 
{ 
    protoMessage newMessage = NULL; 
    switch (objectType) 
    { 
      case ObjectComponent       : newMessage = collection->add_component();         break;
      case ObjectShape           : newMessage = collection->add_shape();             break;
      case ObjectTransform       : newMessage = collection->add_transform();         break;
      case ObjectMovement        : newMessage = collection->add_movement();          break;
      case ObjectSteering        : newMessage = collection->add_steering();          break;
      case ObjectWeapon          : newMessage = collection->add_weapon();            break;
      case ObjectShooting        : newMessage = collection->add_shooting();          break;
      case ObjectArming          : newMessage = collection->add_arming();            break;
      case ObjectBanking         : newMessage = collection->add_banking();           break;
      case ObjectEnergy          : newMessage = collection->add_energy();            break;
      case ObjectHull            : newMessage = collection->add_hull();              break;
      case ObjectShield          : newMessage = collection->add_shield();            break;
      case ObjectCollision       : newMessage = collection->add_collision();         break;
      case ObjectLifetime        : newMessage = collection->add_lifetime();          break;
      case ObjectDamageOnCollision: newMessage = collection->add_damageoncollision(); break;
      case ObjectDamage          : newMessage = collection->add_damage();            break;
      case ObjectDieOnCollision  : newMessage = collection->add_dieoncollision();    break;
      case ObjectMoveOnCollision : newMessage = collection->add_moveoncollision();   break;
      case ObjectDamageReceiver  : newMessage = collection->add_damagereceiver();    break;
      case ObjectArmingAgent     : newMessage = collection->add_armingagent();       break;
      case ObjectSteeringAgent   : newMessage = collection->add_steeringagent();     break;
      case ObjectAiAgent         : newMessage = collection->add_aiagent();           break;
      case ObjectAiBrain         : newMessage = collection->add_aibrain();           break;
      case ObjectAiGroup         : newMessage = collection->add_aigroup();           break;
      case ObjectAiGroupMember   : newMessage = collection->add_aigroupmember();     break;
      case ObjectDestructable    : newMessage = collection->add_destructable();      break;
      case ObjectDestroyable     : newMessage = collection->add_destroyable();       break;
      case ObjectSpawnPoint      : newMessage = collection->add_spawnpoint();        break;
      case ObjectCameraSettings  : newMessage = collection->add_camerasettings();    break;
      case ObjectCameraTransform : newMessage = collection->add_cameratransform();   break;
      case ObjectCameraThirdPerson: newMessage = collection->add_camerathirdperson(); break;
      case ObjectLight           : newMessage = collection->add_light();             break;
      case ObjectTest            : newMessage = collection->add_test();              break;
      case ObjectEntity          : newMessage = collection->add_entity();            break;
      case ObjectObjectList      : newMessage = collection->add_objectlist();        break;
      case ObjectMyTimer         : newMessage = collection->add_mytimer();           break;
      case ObjectMyCounter       : newMessage = collection->add_mycounter();         break;
      case ObjectScriptItem      : newMessage = collection->add_scriptitem();        break;
      case ObjectTimer           : newMessage = collection->add_timer();             break;
      case ObjectCounter         : newMessage = collection->add_counter();           break;
      case ObjectJumpgate        : newMessage = collection->add_jumpgate();          break;
      case ObjectTask            : newMessage = collection->add_task();              break;
      case ObjectAction          : newMessage = collection->add_action();            break;
      case ObjectCondition       : newMessage = collection->add_condition();         break;
      case ObjectCommand         : newMessage = collection->add_command();           break;
      case ObjectSet             : newMessage = collection->add_set();               break;
      case ObjectReachTask       : newMessage = collection->add_reachtask();         break;
      case ObjectCompleteTask    : newMessage = collection->add_completetask();      break;
      case ObjectMission         : newMessage = collection->add_mission();           break;
      case ObjectLocation        : newMessage = collection->add_location();          break;
      case ObjectRegion          : newMessage = collection->add_region();            break;
      case ObjectSector          : newMessage = collection->add_sector();            break;
      case ObjectDebugSection    : newMessage = collection->add_debugsection();      break;
      case ObjectDebugCollision  : newMessage = collection->add_debugcollision();    break;
      case ObjectDebugHUD        : newMessage = collection->add_debughud();          break;
      case ObjectDebug           : newMessage = collection->add_debug();             break;
      case ObjectConfigHUD       : newMessage = collection->add_confighud();         break;
      case ObjectConfigGame      : newMessage = collection->add_configgame();        break;
      case ObjectConfigInput     : newMessage = collection->add_configinput();       break;
      case ObjectConfigVideo     : newMessage = collection->add_configvideo();       break;
      case ObjectConfigSound     : newMessage = collection->add_configsound();       break;
      case ObjectConfig          : newMessage = collection->add_config();            break;
      case ObjectWorld           : newMessage = collection->add_world();             break; 
      default: assert(false); break; 
    } 
    return newMessage; 
} 

//--------------------------------------------------------- map ref to object type 
 
int mapRefToObjectType(int objectOrRefType) 
{ 
    switch (objectOrRefType) 
    { 
      case ObjectComponentRef        : return ObjectComponent;      
      case ObjectShapeRef            : return ObjectShape;          
      case ObjectTransformRef        : return ObjectTransform;      
      case ObjectMovementRef         : return ObjectMovement;       
      case ObjectSteeringRef         : return ObjectSteering;       
      case ObjectWeaponRef           : return ObjectWeapon;         
      case ObjectShootingRef         : return ObjectShooting;       
      case ObjectArmingRef           : return ObjectArming;         
      case ObjectBankingRef          : return ObjectBanking;        
      case ObjectEnergyRef           : return ObjectEnergy;         
      case ObjectHullRef             : return ObjectHull;           
      case ObjectShieldRef           : return ObjectShield;         
      case ObjectCollisionRef        : return ObjectCollision;      
      case ObjectLifetimeRef         : return ObjectLifetime;       
      case ObjectDamageOnCollisionRef: return ObjectDamageOnCollision;
      case ObjectDamageRef           : return ObjectDamage;         
      case ObjectDieOnCollisionRef   : return ObjectDieOnCollision; 
      case ObjectMoveOnCollisionRef  : return ObjectMoveOnCollision;
      case ObjectDamageReceiverRef   : return ObjectDamageReceiver; 
      case ObjectArmingAgentRef      : return ObjectArmingAgent;    
      case ObjectSteeringAgentRef    : return ObjectSteeringAgent;  
      case ObjectAiAgentRef          : return ObjectAiAgent;        
      case ObjectAiBrainRef          : return ObjectAiBrain;        
      case ObjectAiGroupRef          : return ObjectAiGroup;        
      case ObjectAiGroupMemberRef    : return ObjectAiGroupMember;  
      case ObjectDestructableRef     : return ObjectDestructable;   
      case ObjectDestroyableRef      : return ObjectDestroyable;    
      case ObjectSpawnPointRef       : return ObjectSpawnPoint;     
      case ObjectCameraSettingsRef   : return ObjectCameraSettings; 
      case ObjectCameraTransformRef  : return ObjectCameraTransform;
      case ObjectCameraThirdPersonRef: return ObjectCameraThirdPerson;
      case ObjectLightRef            : return ObjectLight;          
      case ObjectTestRef             : return ObjectTest;           
      case ObjectEntityRef           : return ObjectEntity;         
      case ObjectObjectListRef       : return ObjectObjectList;     
      case ObjectMyTimerRef          : return ObjectMyTimer;        
      case ObjectMyCounterRef        : return ObjectMyCounter;      
      case ObjectScriptItemRef       : return ObjectScriptItem;     
      case ObjectTimerRef            : return ObjectTimer;          
      case ObjectCounterRef          : return ObjectCounter;        
      case ObjectJumpgateRef         : return ObjectJumpgate;       
      case ObjectTaskRef             : return ObjectTask;           
      case ObjectActionRef           : return ObjectAction;         
      case ObjectConditionRef        : return ObjectCondition;      
      case ObjectCommandRef          : return ObjectCommand;        
      case ObjectSetRef              : return ObjectSet;            
      case ObjectReachTaskRef        : return ObjectReachTask;      
      case ObjectCompleteTaskRef     : return ObjectCompleteTask;   
      case ObjectMissionRef          : return ObjectMission;        
      case ObjectLocationRef         : return ObjectLocation;       
      case ObjectRegionRef           : return ObjectRegion;         
      case ObjectSectorRef           : return ObjectSector;         
      case ObjectDebugSectionRef     : return ObjectDebugSection;   
      case ObjectDebugCollisionRef   : return ObjectDebugCollision; 
      case ObjectDebugHUDRef         : return ObjectDebugHUD;       
      case ObjectDebugRef            : return ObjectDebug;          
      case ObjectConfigHUDRef        : return ObjectConfigHUD;      
      case ObjectConfigGameRef       : return ObjectConfigGame;     
      case ObjectConfigInputRef      : return ObjectConfigInput;    
      case ObjectConfigVideoRef      : return ObjectConfigVideo;    
      case ObjectConfigSoundRef      : return ObjectConfigSound;    
      case ObjectConfigRef           : return ObjectConfig;         
      case ObjectWorldRef            : return ObjectWorld;           
      default: break; 
    } 
    return objectOrRefType; 
} 

//--------------------------------------------------------- map object type to ref 
 
int mapObjectTypeToRef(int objectOrRefType) 
{ 
    switch (objectOrRefType) 
    { 
      case ObjectComponent       : return ObjectComponentRef;       
      case ObjectShape           : return ObjectShapeRef;           
      case ObjectTransform       : return ObjectTransformRef;       
      case ObjectMovement        : return ObjectMovementRef;        
      case ObjectSteering        : return ObjectSteeringRef;        
      case ObjectWeapon          : return ObjectWeaponRef;          
      case ObjectShooting        : return ObjectShootingRef;        
      case ObjectArming          : return ObjectArmingRef;          
      case ObjectBanking         : return ObjectBankingRef;         
      case ObjectEnergy          : return ObjectEnergyRef;          
      case ObjectHull            : return ObjectHullRef;            
      case ObjectShield          : return ObjectShieldRef;          
      case ObjectCollision       : return ObjectCollisionRef;       
      case ObjectLifetime        : return ObjectLifetimeRef;        
      case ObjectDamageOnCollision: return ObjectDamageOnCollisionRef;
      case ObjectDamage          : return ObjectDamageRef;          
      case ObjectDieOnCollision  : return ObjectDieOnCollisionRef;  
      case ObjectMoveOnCollision : return ObjectMoveOnCollisionRef; 
      case ObjectDamageReceiver  : return ObjectDamageReceiverRef;  
      case ObjectArmingAgent     : return ObjectArmingAgentRef;     
      case ObjectSteeringAgent   : return ObjectSteeringAgentRef;   
      case ObjectAiAgent         : return ObjectAiAgentRef;         
      case ObjectAiBrain         : return ObjectAiBrainRef;         
      case ObjectAiGroup         : return ObjectAiGroupRef;         
      case ObjectAiGroupMember   : return ObjectAiGroupMemberRef;   
      case ObjectDestructable    : return ObjectDestructableRef;    
      case ObjectDestroyable     : return ObjectDestroyableRef;     
      case ObjectSpawnPoint      : return ObjectSpawnPointRef;      
      case ObjectCameraSettings  : return ObjectCameraSettingsRef;  
      case ObjectCameraTransform : return ObjectCameraTransformRef; 
      case ObjectCameraThirdPerson: return ObjectCameraThirdPersonRef;
      case ObjectLight           : return ObjectLightRef;           
      case ObjectTest            : return ObjectTestRef;            
      case ObjectEntity          : return ObjectEntityRef;          
      case ObjectObjectList      : return ObjectObjectListRef;      
      case ObjectMyTimer         : return ObjectMyTimerRef;         
      case ObjectMyCounter       : return ObjectMyCounterRef;       
      case ObjectScriptItem      : return ObjectScriptItemRef;      
      case ObjectTimer           : return ObjectTimerRef;           
      case ObjectCounter         : return ObjectCounterRef;         
      case ObjectJumpgate        : return ObjectJumpgateRef;        
      case ObjectTask            : return ObjectTaskRef;            
      case ObjectAction          : return ObjectActionRef;          
      case ObjectCondition       : return ObjectConditionRef;       
      case ObjectCommand         : return ObjectCommandRef;         
      case ObjectSet             : return ObjectSetRef;             
      case ObjectReachTask       : return ObjectReachTaskRef;       
      case ObjectCompleteTask    : return ObjectCompleteTaskRef;    
      case ObjectMission         : return ObjectMissionRef;         
      case ObjectLocation        : return ObjectLocationRef;        
      case ObjectRegion          : return ObjectRegionRef;          
      case ObjectSector          : return ObjectSectorRef;          
      case ObjectDebugSection    : return ObjectDebugSectionRef;    
      case ObjectDebugCollision  : return ObjectDebugCollisionRef;  
      case ObjectDebugHUD        : return ObjectDebugHUDRef;        
      case ObjectDebug           : return ObjectDebugRef;           
      case ObjectConfigHUD       : return ObjectConfigHUDRef;       
      case ObjectConfigGame      : return ObjectConfigGameRef;      
      case ObjectConfigInput     : return ObjectConfigInputRef;     
      case ObjectConfigVideo     : return ObjectConfigVideoRef;     
      case ObjectConfigSound     : return ObjectConfigSoundRef;     
      case ObjectConfig          : return ObjectConfigRef;          
      case ObjectWorld           : return ObjectWorldRef;            
      default: break; 
    } 
    return objectOrRefType; 
} 

//--------------------------------------------------- message name for object type 
 
std::string messageNameForObjectType(int typeObject) 
{ 
    switch (typeObject) 
    { 
      case ObjectComponent           : return "Component";
      case ObjectComponentRef        : return "ComponentRef";
      case ObjectShape               : return "Shape";
      case ObjectShapeRef            : return "ShapeRef";
      case ObjectTransform           : return "Transform";
      case ObjectTransformRef        : return "TransformRef";
      case ObjectMovement            : return "Movement";
      case ObjectMovementRef         : return "MovementRef";
      case ObjectSteering            : return "Steering";
      case ObjectSteeringRef         : return "SteeringRef";
      case ObjectWeapon              : return "Weapon";
      case ObjectWeaponRef           : return "WeaponRef";
      case ObjectShooting            : return "Shooting";
      case ObjectShootingRef         : return "ShootingRef";
      case ObjectArming              : return "Arming";
      case ObjectArmingRef           : return "ArmingRef";
      case ObjectBanking             : return "Banking";
      case ObjectBankingRef          : return "BankingRef";
      case ObjectEnergy              : return "Energy";
      case ObjectEnergyRef           : return "EnergyRef";
      case ObjectHull                : return "Hull";
      case ObjectHullRef             : return "HullRef";
      case ObjectShield              : return "Shield";
      case ObjectShieldRef           : return "ShieldRef";
      case ObjectCollision           : return "Collision";
      case ObjectCollisionRef        : return "CollisionRef";
      case ObjectLifetime            : return "Lifetime";
      case ObjectLifetimeRef         : return "LifetimeRef";
      case ObjectDamageOnCollision   : return "DamageOnCollision";
      case ObjectDamageOnCollisionRef: return "DamageOnCollisionRef";
      case ObjectDamage              : return "Damage";
      case ObjectDamageRef           : return "DamageRef";
      case ObjectDieOnCollision      : return "DieOnCollision";
      case ObjectDieOnCollisionRef   : return "DieOnCollisionRef";
      case ObjectMoveOnCollision     : return "MoveOnCollision";
      case ObjectMoveOnCollisionRef  : return "MoveOnCollisionRef";
      case ObjectDamageReceiver      : return "DamageReceiver";
      case ObjectDamageReceiverRef   : return "DamageReceiverRef";
      case ObjectArmingAgent         : return "ArmingAgent";
      case ObjectArmingAgentRef      : return "ArmingAgentRef";
      case ObjectSteeringAgent       : return "SteeringAgent";
      case ObjectSteeringAgentRef    : return "SteeringAgentRef";
      case ObjectAiAgent             : return "AiAgent";
      case ObjectAiAgentRef          : return "AiAgentRef";
      case ObjectAiBrain             : return "AiBrain";
      case ObjectAiBrainRef          : return "AiBrainRef";
      case ObjectAiGroup             : return "AiGroup";
      case ObjectAiGroupRef          : return "AiGroupRef";
      case ObjectAiGroupMember       : return "AiGroupMember";
      case ObjectAiGroupMemberRef    : return "AiGroupMemberRef";
      case ObjectDestructable        : return "Destructable";
      case ObjectDestructableRef     : return "DestructableRef";
      case ObjectDestroyable         : return "Destroyable";
      case ObjectDestroyableRef      : return "DestroyableRef";
      case ObjectSpawnPoint          : return "SpawnPoint";
      case ObjectSpawnPointRef       : return "SpawnPointRef";
      case ObjectCameraSettings      : return "CameraSettings";
      case ObjectCameraSettingsRef   : return "CameraSettingsRef";
      case ObjectCameraTransform     : return "CameraTransform";
      case ObjectCameraTransformRef  : return "CameraTransformRef";
      case ObjectCameraThirdPerson   : return "CameraThirdPerson";
      case ObjectCameraThirdPersonRef: return "CameraThirdPersonRef";
      case ObjectLight               : return "Light";
      case ObjectLightRef            : return "LightRef";
      case ObjectTest                : return "Test";
      case ObjectTestRef             : return "TestRef";
      case ObjectEntity              : return "Entity";
      case ObjectEntityRef           : return "EntityRef";
      case ObjectObjectList          : return "ObjectList";
      case ObjectObjectListRef       : return "ObjectListRef";
      case ObjectMyTimer             : return "MyTimer";
      case ObjectMyTimerRef          : return "MyTimerRef";
      case ObjectMyCounter           : return "MyCounter";
      case ObjectMyCounterRef        : return "MyCounterRef";
      case ObjectScriptItem          : return "ScriptItem";
      case ObjectScriptItemRef       : return "ScriptItemRef";
      case ObjectTimer               : return "Timer";
      case ObjectTimerRef            : return "TimerRef";
      case ObjectCounter             : return "Counter";
      case ObjectCounterRef          : return "CounterRef";
      case ObjectJumpgate            : return "Jumpgate";
      case ObjectJumpgateRef         : return "JumpgateRef";
      case ObjectTask                : return "Task";
      case ObjectTaskRef             : return "TaskRef";
      case ObjectAction              : return "Action";
      case ObjectActionRef           : return "ActionRef";
      case ObjectCondition           : return "Condition";
      case ObjectConditionRef        : return "ConditionRef";
      case ObjectCommand             : return "Command";
      case ObjectCommandRef          : return "CommandRef";
      case ObjectSet                 : return "Set";
      case ObjectSetRef              : return "SetRef";
      case ObjectReachTask           : return "ReachTask";
      case ObjectReachTaskRef        : return "ReachTaskRef";
      case ObjectCompleteTask        : return "CompleteTask";
      case ObjectCompleteTaskRef     : return "CompleteTaskRef";
      case ObjectMission             : return "Mission";
      case ObjectMissionRef          : return "MissionRef";
      case ObjectLocation            : return "Location";
      case ObjectLocationRef         : return "LocationRef";
      case ObjectRegion              : return "Region";
      case ObjectRegionRef           : return "RegionRef";
      case ObjectSector              : return "Sector";
      case ObjectSectorRef           : return "SectorRef";
      case ObjectDebugSection        : return "DebugSection";
      case ObjectDebugSectionRef     : return "DebugSectionRef";
      case ObjectDebugCollision      : return "DebugCollision";
      case ObjectDebugCollisionRef   : return "DebugCollisionRef";
      case ObjectDebugHUD            : return "DebugHUD";
      case ObjectDebugHUDRef         : return "DebugHUDRef";
      case ObjectDebug               : return "Debug";
      case ObjectDebugRef            : return "DebugRef";
      case ObjectConfigHUD           : return "ConfigHUD";
      case ObjectConfigHUDRef        : return "ConfigHUDRef";
      case ObjectConfigGame          : return "ConfigGame";
      case ObjectConfigGameRef       : return "ConfigGameRef";
      case ObjectConfigInput         : return "ConfigInput";
      case ObjectConfigInputRef      : return "ConfigInputRef";
      case ObjectConfigVideo         : return "ConfigVideo";
      case ObjectConfigVideoRef      : return "ConfigVideoRef";
      case ObjectConfigSound         : return "ConfigSound";
      case ObjectConfigSoundRef      : return "ConfigSoundRef";
      case ObjectConfig              : return "Config";
      case ObjectConfigRef           : return "ConfigRef";
      case ObjectWorld               : return "World";
      case ObjectWorldRef            : return "WorldRef"; 
      default: break; 
    } 
    return "[???]"; 
} 

//------------------------------------------------- field descriptions for message 
 
std::map<std::string, std::string> fieldDescriptionsForMessage(protoMessage msg) 
{ 
    std::map<std::string, std::string> dm; 
    int objectType = mapRefToObjectType(objectTypeForMessage(msg)); 
    switch (objectType) 
    { 
      case ObjectComponent       : {
           dm[               "_id"] = "database id";
           dm[          "_version"] = "database version";
           dm[               "uid"] = "unique id";
      } break;
      case ObjectShape           : {
           dm[               "_id"] = "database id";
           dm[          "_version"] = "database version";
           dm[               "uid"] = "unique id";
      } break;
      case ObjectTransform       : {
           dm[               "_id"] = "database id";
           dm[          "_version"] = "database version";
           dm[               "uid"] = "unique id";
      } break;
      case ObjectMovement        : {
           dm[               "_id"] = "database id";
           dm[          "_version"] = "database version";
           dm[               "uid"] = "unique id";
      } break;
      case ObjectSteering        : {
           dm[               "_id"] = "database id";
           dm[          "_version"] = "database version";
           dm[               "uid"] = "unique id";
      } break;
      case ObjectWeapon          : {
           dm[               "_id"] = "database id";
           dm[          "_version"] = "database version";
           dm[               "uid"] = "unique id";
      } break;
      case ObjectShooting        : {
           dm[               "_id"] = "database id";
           dm[          "_version"] = "database version";
           dm[               "uid"] = "unique id";
      } break;
      case ObjectArming          : {
           dm[               "_id"] = "database id";
           dm[          "_version"] = "database version";
           dm[               "uid"] = "unique id";
      } break;
      case ObjectBanking         : {
           dm[               "_id"] = "database id";
           dm[          "_version"] = "database version";
           dm[               "uid"] = "unique id";
      } break;
      case ObjectEnergy          : {
           dm[               "_id"] = "database id";
           dm[          "_version"] = "database version";
           dm[               "uid"] = "unique id";
      } break;
      case ObjectHull            : {
           dm[               "_id"] = "database id";
           dm[          "_version"] = "database version";
           dm[               "uid"] = "unique id";
      } break;
      case ObjectShield          : {
           dm[               "_id"] = "database id";
           dm[          "_version"] = "database version";
           dm[               "uid"] = "unique id";
      } break;
      case ObjectCollision       : {
           dm[               "_id"] = "database id";
           dm[          "_version"] = "database version";
           dm[               "uid"] = "unique id";
      } break;
      case ObjectLifetime        : {
           dm[               "_id"] = "database id";
           dm[          "_version"] = "database version";
           dm[               "uid"] = "unique id";
      } break;
      case ObjectDamageOnCollision: {
           dm[               "_id"] = "database id";
           dm[          "_version"] = "database version";
           dm[               "uid"] = "unique id";
      } break;
      case ObjectDamage          : {
           dm[               "_id"] = "database id";
           dm[          "_version"] = "database version";
           dm[               "uid"] = "unique id";
      } break;
      case ObjectDieOnCollision  : {
           dm[               "_id"] = "database id";
           dm[          "_version"] = "database version";
           dm[               "uid"] = "unique id";
      } break;
      case ObjectMoveOnCollision : {
           dm[               "_id"] = "database id";
           dm[          "_version"] = "database version";
           dm[               "uid"] = "unique id";
      } break;
      case ObjectDamageReceiver  : {
           dm[               "_id"] = "database id";
           dm[          "_version"] = "database version";
           dm[               "uid"] = "unique id";
      } break;
      case ObjectArmingAgent     : {
           dm[               "_id"] = "database id";
           dm[          "_version"] = "database version";
           dm[               "uid"] = "unique id";
      } break;
      case ObjectSteeringAgent   : {
           dm[               "_id"] = "database id";
           dm[          "_version"] = "database version";
           dm[               "uid"] = "unique id";
      } break;
      case ObjectAiAgent         : {
           dm[               "_id"] = "database id";
           dm[          "_version"] = "database version";
           dm[               "uid"] = "unique id";
      } break;
      case ObjectAiBrain         : {
           dm[               "_id"] = "database id";
           dm[          "_version"] = "database version";
           dm[               "uid"] = "unique id";
      } break;
      case ObjectAiGroup         : {
           dm[               "_id"] = "database id";
           dm[          "_version"] = "database version";
           dm[               "uid"] = "unique id";
      } break;
      case ObjectAiGroupMember   : {
           dm[               "_id"] = "database id";
           dm[          "_version"] = "database version";
           dm[               "uid"] = "unique id";
      } break;
      case ObjectDestructable    : {
           dm[               "_id"] = "database id";
           dm[          "_version"] = "database version";
           dm[               "uid"] = "unique id";
      } break;
      case ObjectDestroyable     : {
           dm[               "_id"] = "database id";
           dm[          "_version"] = "database version";
           dm[               "uid"] = "unique id";
      } break;
      case ObjectSpawnPoint      : {
           dm[               "_id"] = "database id";
           dm[          "_version"] = "database version";
           dm[               "uid"] = "unique id";
      } break;
      case ObjectCameraSettings  : {
           dm[               "_id"] = "database id";
           dm[          "_version"] = "database version";
           dm[               "uid"] = "unique id";
      } break;
      case ObjectCameraTransform : {
           dm[               "_id"] = "database id";
           dm[          "_version"] = "database version";
           dm[               "uid"] = "unique id";
      } break;
      case ObjectCameraThirdPerson: {
           dm[               "_id"] = "database id";
           dm[          "_version"] = "database version";
           dm[               "uid"] = "unique id";
      } break;
      case ObjectLight           : {
           dm[               "_id"] = "database id";
           dm[          "_version"] = "database version";
           dm[               "uid"] = "unique id";
      } break;
      case ObjectTest            : {
           dm[               "_id"] = "database id";
           dm[          "_version"] = "database version";
           dm[               "uid"] = "unique id";
      } break;
      case ObjectEntity          : {
           dm[               "_id"] = "database id";
           dm[          "_version"] = "database version";
           dm[               "uid"] = "unique id";
      } break;
      case ObjectObjectList      : {
           dm[               "_id"] = "database id";
           dm[          "_version"] = "database version";
           dm[               "uid"] = "unique id";
      } break;
      case ObjectMyTimer         : {
           dm[               "_id"] = "database id";
           dm[          "_version"] = "database version";
           dm[               "uid"] = "unique id";
      } break;
      case ObjectMyCounter       : {
           dm[               "_id"] = "database id";
           dm[          "_version"] = "database version";
           dm[               "uid"] = "unique id";
      } break;
      case ObjectScriptItem      : {
           dm[               "_id"] = "database id";
           dm[          "_version"] = "database version";
           dm[               "uid"] = "unique id";
      } break;
      case ObjectTimer           : {
           dm[               "_id"] = "database id";
           dm[          "_version"] = "database version";
           dm[               "uid"] = "unique id";
      } break;
      case ObjectCounter         : {
           dm[               "_id"] = "database id";
           dm[          "_version"] = "database version";
           dm[               "uid"] = "unique id";
      } break;
      case ObjectJumpgate        : {
           dm[               "_id"] = "database id";
           dm[          "_version"] = "database version";
           dm[               "uid"] = "unique id";
      } break;
      case ObjectTask            : {
           dm[               "_id"] = "database id";
           dm[          "_version"] = "database version";
           dm[               "uid"] = "unique id";
      } break;
      case ObjectAction          : {
           dm[               "_id"] = "database id";
           dm[          "_version"] = "database version";
           dm[               "uid"] = "unique id";
      } break;
      case ObjectCondition       : {
           dm[               "_id"] = "database id";
           dm[          "_version"] = "database version";
           dm[               "uid"] = "unique id";
      } break;
      case ObjectCommand         : {
           dm[               "_id"] = "database id";
           dm[          "_version"] = "database version";
           dm[               "uid"] = "unique id";
      } break;
      case ObjectSet             : {
           dm[               "_id"] = "database id";
           dm[          "_version"] = "database version";
           dm[               "uid"] = "unique id";
      } break;
      case ObjectReachTask       : {
           dm[               "_id"] = "database id";
           dm[          "_version"] = "database version";
           dm[               "uid"] = "unique id";
      } break;
      case ObjectCompleteTask    : {
           dm[               "_id"] = "database id";
           dm[          "_version"] = "database version";
           dm[               "uid"] = "unique id";
      } break;
      case ObjectMission         : {
           dm[               "_id"] = "database id";
           dm[          "_version"] = "database version";
           dm[               "uid"] = "unique id";
      } break;
      case ObjectLocation        : {
           dm[               "_id"] = "database id";
           dm[          "_version"] = "database version";
           dm[               "uid"] = "unique id";
      } break;
      case ObjectRegion          : {
           dm[               "_id"] = "database id";
           dm[          "_version"] = "database version";
           dm[               "uid"] = "unique id";
      } break;
      case ObjectSector          : {
           dm[               "_id"] = "database id";
           dm[          "_version"] = "database version";
           dm[               "uid"] = "unique id";
      } break;
      case ObjectDebugSection    : {
           dm[               "_id"] = "database id";
           dm[          "_version"] = "database version";
           dm[               "uid"] = "unique id";
      } break;
      case ObjectDebugCollision  : {
           dm[               "_id"] = "database id";
           dm[          "_version"] = "database version";
           dm[               "uid"] = "unique id";
      } break;
      case ObjectDebugHUD        : {
           dm[               "_id"] = "database id";
           dm[          "_version"] = "database version";
           dm[               "uid"] = "unique id";
      } break;
      case ObjectDebug           : {
           dm[               "_id"] = "database id";
           dm[          "_version"] = "database version";
           dm[               "uid"] = "unique id";
      } break;
      case ObjectConfigHUD       : {
           dm[               "_id"] = "database id";
           dm[          "_version"] = "database version";
           dm[               "uid"] = "unique id";
      } break;
      case ObjectConfigGame      : {
           dm[               "_id"] = "database id";
           dm[          "_version"] = "database version";
           dm[               "uid"] = "unique id";
      } break;
      case ObjectConfigInput     : {
           dm[               "_id"] = "database id";
           dm[          "_version"] = "database version";
           dm[               "uid"] = "unique id";
      } break;
      case ObjectConfigVideo     : {
           dm[               "_id"] = "database id";
           dm[          "_version"] = "database version";
           dm[               "uid"] = "unique id";
      } break;
      case ObjectConfigSound     : {
           dm[               "_id"] = "database id";
           dm[          "_version"] = "database version";
           dm[               "uid"] = "unique id";
      } break;
      case ObjectConfig          : {
           dm[               "_id"] = "database id";
           dm[          "_version"] = "database version";
           dm[               "uid"] = "unique id";
      } break;
      case ObjectWorld           : {
           dm[               "_id"] = "database id";
           dm[          "_version"] = "database version";
           dm[               "uid"] = "unique id";
      } break; 
      default: break; 
    } 
    return dm; 
} 

} // namespace proto